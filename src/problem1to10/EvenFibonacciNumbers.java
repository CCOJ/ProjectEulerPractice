/**
 * Even Fibonacci numbers
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

package problem1to10;

public class EvenFibonacciNumbers {

    private int high, sum;

    public EvenFibonacciNumbers(int high) {
        this.high = high;
        sum = computeSum();
    }

    private int computeSum() {
        int computeSum = 0; //Default sum if high is less than 2
        int term1 = 1; //Default term 1
        int term2 = 2; //Default term 2
        int next;      //Next value adds term1 and term2

        while (term2 < high) { //loops till term2 hits the high
            next = term1 + term2; //Creates next

            if (term2 % 2 == 0) { //If even, it adds to sum
                computeSum += term2;
            }

            term1 = term2; //Replace term1 with term 2
            term2 = next;  //Replace term2 with next
        }

        return computeSum;
    }
    public int getHigh() {
        return high;

    }
    public int getSum() {
        return sum;
    }

    public String toString() {
        return "High: " + getHigh() +
                "\nSum: " + getSum();
    }

    public static void main(String[] args) {
        int high = 4000000; //4 million
        EvenFibonacciNumbers problem2 = new EvenFibonacciNumbers(high);
        System.out.println(problem2);
    }
}
